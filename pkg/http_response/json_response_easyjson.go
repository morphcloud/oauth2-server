// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http_response

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse(in *jlexer.Lexer, out *SingleJSONResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse(out *jwriter.Writer, in SingleJSONResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleJSONResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleJSONResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleJSONResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleJSONResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse(l, v)
}
func easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse1(in *jlexer.Lexer, out *MultiplePaginatedJSONResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		case "links":
			(out.Links).UnmarshalEasyJSON(in)
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse1(out *jwriter.Writer, in MultiplePaginatedJSONResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	{
		const prefix string = ",\"links\":"
		out.RawString(prefix)
		(in.Links).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix)
		(in.Meta).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiplePaginatedJSONResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiplePaginatedJSONResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiplePaginatedJSONResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiplePaginatedJSONResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse1(l, v)
}
func easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse2(in *jlexer.Lexer, out *MultipleJSONResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse2(out *jwriter.Writer, in MultipleJSONResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultipleJSONResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultipleJSONResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultipleJSONResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultipleJSONResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse2(l, v)
}
func easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse3(in *jlexer.Lexer, out *Meta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currentPage":
			out.CurrentPage = uint64(in.Uint64())
		case "from":
			out.From = uint64(in.Uint64())
		case "lastPage":
			out.LastPage = uint64(in.Uint64())
		case "path":
			out.Path = string(in.String())
		case "perPage":
			out.PerPage = uint64(in.Uint64())
		case "to":
			out.To = uint64(in.Uint64())
		case "total":
			out.Total = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse3(out *jwriter.Writer, in Meta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currentPage\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.CurrentPage))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.From))
	}
	{
		const prefix string = ",\"lastPage\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.LastPage))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"perPage\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PerPage))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.To))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Meta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Meta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse3(l, v)
}
func easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse4(in *jlexer.Lexer, out *Links) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first":
			out.First = string(in.String())
		case "last":
			out.Last = string(in.String())
		case "prev":
			out.Prev = string(in.String())
		case "next":
			out.Next = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse4(out *jwriter.Writer, in Links) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first\":"
		out.RawString(prefix[1:])
		out.String(string(in.First))
	}
	{
		const prefix string = ",\"last\":"
		out.RawString(prefix)
		out.String(string(in.Last))
	}
	{
		const prefix string = ",\"prev\":"
		out.RawString(prefix)
		out.String(string(in.Prev))
	}
	{
		const prefix string = ",\"next\":"
		out.RawString(prefix)
		out.String(string(in.Next))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Links) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Links) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd7c0adaEncodeGithubComMorphcloudOauth2ServerPkgHttpResponse4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Links) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Links) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd7c0adaDecodeGithubComMorphcloudOauth2ServerPkgHttpResponse4(l, v)
}
